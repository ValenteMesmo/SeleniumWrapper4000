using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.IE;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;

namespace SeleniumWrapper4000
{
    public enum BrowserType
    {
        Chrome,
        InternetExplorer
    }

    public class SeleniumWrapper : IDisposable
    {
        private readonly RemoteWebDriver driver;

        private int currentTimeoutInMilliseconds;

        public SeleniumWrapper(bool headless = false, int implicityWait = 1000, BrowserType BrowserType = BrowserType.Chrome)
        {
            currentTimeoutInMilliseconds = implicityWait;

            if (BrowserType == BrowserType.Chrome)
                driver = CreateChromeDriver(headless);
            else
                driver = CreateIEDriver();

            SetImplicityWait(currentTimeoutInMilliseconds);
        }

        private static RemoteWebDriver CreateIEDriver()
        {
            var cService = InternetExplorerDriverService.CreateDefaultService();
            cService.HideCommandPromptWindow = true;
            cService.SuppressInitialDiagnosticInformation = true;

            InternetExplorerOptions options = new InternetExplorerOptions();
            options.IntroduceInstabilityByIgnoringProtectedModeSettings = true;
            options.IgnoreZoomLevel = true;

            var webdriver = new InternetExplorerDriver(cService, options);

            AttachToCurrentProcess(cService.ProcessId);

            return webdriver;
        }
       
        private static void AttachToCurrentProcess(int ProcessId)
        {
            var driverProcessIds = new List<int> { ProcessId };

            //Get all the childs generated by the driver like conhost, chrome.exe...
            using (var mos = new System.Management.ManagementObjectSearcher(
                $"Select * From Win32_Process Where ParentProcessID={ProcessId}"
            ))
                foreach (var mo in mos.Get())
                    driverProcessIds.Add(Convert.ToInt32(mo["ProcessID"]));

            //TODO: receive packages folder as optional parameter.
            Process process = new Process();
            //process.StartInfo.RedirectStandardOutput = true;
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.CreateNoWindow = true;
            process.StartInfo.FileName = @"..\..\..\packages\FSharp.Compiler.Tools.10.2.3\tools\fsi.exe";
            process.StartInfo.Arguments = $"KillWithParent.fsx {Process.GetCurrentProcess().Id} {string.Join(" ", driverProcessIds)}";
            process.Start();
        }

        private static RemoteWebDriver CreateChromeDriver(bool headless)
        {
            var cService = ChromeDriverService.CreateDefaultService();
            cService.HideCommandPromptWindow = true;
            cService.SuppressInitialDiagnosticInformation = true;

            var options = new ChromeOptions();

            if (headless)
            {
                options.AddArguments("--headless");
                options.AddArguments("--disable-gpu");
            }
            else
            {
                options.AddArguments("disable-infobars");
                options.AddArguments("--start-maximized");
            }

            options.AddArguments("fast-start");

            options.AddArguments("--incognito");
            options.AddArguments("--no-sandbox");

        
            var webdriver = new ChromeDriver(cService, options);

            AttachToCurrentProcess(cService.ProcessId);

            return webdriver;
        }

        public void GoToUrl(string url)
        {
            driver.Navigate().GoToUrl(url);
        }

        public void Refresh(bool deleteCookies = false)
        {
            if (deleteCookies)
                driver.Manage().Cookies.DeleteAllCookies();
            driver.Navigate().Refresh();
        }

        public void SendText(string text)
        {
            new Actions(driver).SendKeys(text).Perform();
        }

        public void PressEnter()
        {
            new Actions(driver).SendKeys(OpenQA.Selenium.Keys.Enter).Perform();
        }

        public void PressTab()
        {
            new Actions(driver).SendKeys(OpenQA.Selenium.Keys.Tab).Perform();
        }

        public void Click(string selector, int? milliseconds = null)
        {
            if (!milliseconds.HasValue)
                milliseconds = currentTimeoutInMilliseconds;

            var wait = new WebDriverWait(driver, TimeSpan.FromMilliseconds(milliseconds.Value));
            IWebElement element = null;
            wait.Until(drv =>
            {
                element = driver.FindElementByCssSelector(selector);

                if (element == null || !element.Displayed || !element.Enabled)
                    return null;

                try
                {
                    element.Click();
                }
                catch (ElementClickInterceptedException)
                {
                    //driver.ExecuteScript("arguments[0].click();", element);
                    return null;
                }

                return element;
            });
        }

        public string GetQueryStringValue(string key)
        {
            var myUri = new Uri(driver.Url);
            var queryStrings = DecodeQueryParameters(myUri);
            if (queryStrings.ContainsKey(key))
                return queryStrings[key];

            return string.Empty;
        }

        private Dictionary<string, string> DecodeQueryParameters(Uri uri)
        {
            if (uri == null || uri.Query.Length == 0)
                return new Dictionary<string, string>();

            return uri.Query.TrimStart('?')
                            .Split(new[] { '&', ';' }, StringSplitOptions.RemoveEmptyEntries)
                            .Select(parameter => parameter.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))
                            .GroupBy(parts => parts[0],
                                     parts => parts.Length > 2 ? string.Join("=", parts, 1, parts.Length - 1) : (parts.Length > 1 ? parts[1] : ""))
                            .ToDictionary(grouping => grouping.Key,
                                          grouping => string.Join(",", grouping));
        }

        public void Wait(Func<bool> condition, int? milliseconds = null)
        {
            if (!milliseconds.HasValue)
                milliseconds = currentTimeoutInMilliseconds;

            var wait = new WebDriverWait(driver, TimeSpan.FromMilliseconds(milliseconds.Value));

            wait.Until(drv =>
            {
                if (condition())
                    return new { };

                return null;
            });
        }

        public void WaitTextCondition(string selector, Func<string, bool> condition, int? milliseconds = null)
        {
            if (!milliseconds.HasValue)
                milliseconds = currentTimeoutInMilliseconds;

            var wait = new WebDriverWait(driver, TimeSpan.FromMilliseconds(milliseconds.Value));

            wait.Until(drv =>
            {
                IWebElement element = null;
                try
                {
                    element = driver.FindElementByCssSelector(selector);
                }
                catch { }
                if (element == null)
                    return null;
                if (!element.Displayed)
                    return null;
                if (element.Text == null)
                    return null;
                if (condition(element.Text))
                    return element;
                return null;
            });
        }

        public void PressEnter(string selector) => driver.FindElementByCssSelector(selector).SendKeys(OpenQA.Selenium.Keys.Enter);

        public string GetText(string selector)
        {
            var element = driver.FindElementByCssSelector(selector);
            if (element.TagName == "select")
                return new SelectElement(element).SelectedOption?.Text;

            if (element.TagName == "textarea" || element.Text == "")
                return element.GetAttribute("value");

            return element.Text;
        }

        public void ConsoleWriteError(string text)
        {
            ExecuteScript("console.error(arguments[0]);", text);
        }

        private IWebElement GetCell(string selector, int rowIndex, int columnIndex, int? milliseconds = null)
        {
            if (!milliseconds.HasValue)
                milliseconds = currentTimeoutInMilliseconds;

            IWebElement cell = null;
            var wait = new WebDriverWait(driver, TimeSpan.FromMilliseconds(milliseconds.Value));

            wait.Until(drv =>
            {
                try
                {
                    var table = driver.FindElementByCssSelector(selector);

                    var row = table.FindElements(By.TagName("tr"))[rowIndex];
                    cell = row.FindElements(By.TagName("td"))[columnIndex];

                }
                catch { }
                return cell;
            });

            return cell;
        }

        public string GetTextFromTableCell(string selector, int rowIndex, int columnIndex, int? milliseconds = null) =>
            GetCell(selector, rowIndex, columnIndex, milliseconds).Text;

        public void ClickOnTableCell(string tableSelector, int rowIndex, int columnIndex, string selector, int? milliseconds = null)
        {
            var cell = GetCell(tableSelector, rowIndex, columnIndex, milliseconds);

            var elements = cell.FindElements(By.CssSelector(selector));
            foreach (var element in elements)
            {
                if (element.Displayed)
                {
                    element.Click();
                    break;
                }
            }
        }

        public void WaitInTableCell(string tableSelector, int rowIndex, int columnIndex, string inCellSelector, int? milliseconds = null)
        {
            if (!milliseconds.HasValue)
                milliseconds = currentTimeoutInMilliseconds;

            var wait = new WebDriverWait(driver, TimeSpan.FromMilliseconds(milliseconds.Value));

            wait.Until(drv =>
            {
                var cell = GetCell(tableSelector, rowIndex, columnIndex, milliseconds);
                var element = cell.FindElement(By.CssSelector(inCellSelector));

                if (element == null || !element.Displayed)
                    return null;

                return element;
            });
        }

        public bool IsSelected(string selector)
        {
            var element = driver.FindElementByCssSelector(selector);
            if (element == null)
                throw new Exception($"Elemento nao encontrado: {selector}");

            return element.Selected;
        }

        public bool IsNotSelected(string selector)
        {
            var element = driver.FindElementByCssSelector(selector);
            if (element == null)
                throw new Exception($"Elemento nao encontrado: {selector}");

            return !element.Selected;
        }

        public bool IsVisible(string selector)
        {
            var element = driver.FindElementByCssSelector(selector);
            if (element == null)
                throw new Exception($"Elemento nao encontrado: {selector}");

            return element.Displayed;
        }

        public bool IsInvisible(string selector)
        {
            var element = driver.FindElementByCssSelector(selector);
            if (element == null)
                throw new Exception($"Elemento nao encontrado: {selector}");

            return !element.Displayed;
        }

        public bool IsDisabled(string selector)
        {
            var element = driver.FindElementByCssSelector(selector);
            if (element == null)
                throw new Exception($"Elemento nao encontrado: {selector}");

            return !element.Enabled;
        }

        public bool IsEnabled(string selector)
        {
            var element = driver.FindElementByCssSelector(selector);
            if (element == null)
                throw new Exception($"Elemento nao encontrado: {selector}");

            return element.Enabled;
        }

        public void WaitInvisibilityOf(string selector, int? milliseconds = null)
        {
            if (!milliseconds.HasValue)
                milliseconds = currentTimeoutInMilliseconds;

            var wait = new WebDriverWait(driver, TimeSpan.FromMilliseconds(milliseconds.Value));

            wait.Until(drv =>
            {
                var element = driver.FindElementByCssSelector(selector);
                if (element != null && element.Displayed)
                    return null;

                return new { };
            });
        }

        public void WaitVisibilityOf(string selector, int? milliseconds = null)
        {
            if (!milliseconds.HasValue)
                milliseconds = currentTimeoutInMilliseconds;

            var wait = new WebDriverWait(driver, TimeSpan.FromMilliseconds(milliseconds.Value));

            wait.Until(drv =>
            {
                var element = driver.FindElementByCssSelector(selector);

                if (element == null || !element.Displayed)
                    return null;

                return element;
            });
        }

        public void WaitUntilElementIsEnabled(string selector, int? milliseconds = null)
        {
            if (!milliseconds.HasValue)
                milliseconds = currentTimeoutInMilliseconds;

            var wait = new WebDriverWait(driver, TimeSpan.FromMilliseconds(milliseconds.Value));

            wait.Until(drv =>
            {
                var element = driver.FindElementByCssSelector(selector);

                if (element == null || !element.Enabled)
                    return null;

                return element;
            });
        }

        public void MaximizeWindow() => driver.Manage().Window.Maximize();

        public void MinimizeWindow() => driver.Manage().Window.Minimize();

        public void SelectOption(string selector, string value)
        {
            var select = driver.FindElementByCssSelector(selector);
            var options = select.FindElements(By.TagName("option"));
            foreach (var option in options)
            {
                if (option.Text.Equals(value))
                {
                    option.Click();
                    break;
                }
            }
        }

        public void SetText(string selector, string text)
        {
            var element = driver.FindElementByCssSelector(selector);
            element.Clear();
            element.SendKeys(text);
        }

        public void SetImplicityWait(int milliseconds)
        {
            currentTimeoutInMilliseconds = milliseconds;
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromMilliseconds(currentTimeoutInMilliseconds);
        }

        public void Dispose()
        {
            driver.Dispose();
        }

        public void SetFile(string selector, string fileName, string fileContent)
        {
            var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, fileName);

            File.WriteAllText(filePath, fileContent);

            var element = driver.FindElementByCssSelector(selector);
            element.SendKeys(filePath);
        }

        public void SetFile(string selector)
        {
            var value = Guid.NewGuid();
            SetFile(selector, $"Teste_{value}.txt", value.ToString());
        }

        public void SetFile(string selector, string filePath)
        {
            var element = driver.FindElementByCssSelector(selector);
            element.SendKeys(filePath);
        }

        public T ExecuteScript<T>(string script, params object[] args)
        {
            return (T)driver.ExecuteScript(script, args);
        }

        public object ExecuteScript(string script, params object[] args)
        {
            return driver.ExecuteScript(script, args);
        }
    }
}
